import os
import sqlite3
from flask import Flask, render_template, request, redirect, session, jsonify
from flask_socketio import SocketIO, send, emit
from flask_bcrypt import Bcrypt
from werkzeug.utils import secure_filename


# Kh·ªüi t·∫°o Flask & SocketIO
app = Flask(__name__)
app.secret_key = "secret_key"
socketio = SocketIO(app, cors_allowed_origins="*")
bcrypt = Bcrypt(app)

# C·∫•u h√¨nh th∆∞ m·ª•c upload file
UPLOAD_FOLDER = "static/uploads"
ALLOWED_EXTENSIONS = None  # Cho ph√©p t·∫•t c·∫£ c√°c lo·∫°i file
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

# Ki·ªÉm tra ƒë·ªãnh d·∫°ng file h·ª£p l·ªá
def allowed_file(filename):
    return True

# Kh·ªüi t·∫°o database SQLite
def init_db():
    conn = sqlite3.connect("chat.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE,
        password TEXT
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT,
        message TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    """)
    conn.commit()
    conn.close()

init_db()

# Danh s√°ch ng∆∞·ªùi d√πng online
users_online = set()

# Trang ch·ªß
@app.route("/")
def home():
    if "username" not in session:
        return redirect("/login")
    return render_template("chat.html", username=session["username"])

# ƒêƒÉng k√Ω
@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form["username"]
        password = bcrypt.generate_password_hash(request.form["password"]).decode("utf-8")
        try:
            conn = sqlite3.connect("chat.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
            conn.commit()
            conn.close()
            return jsonify({"status": "success", "message": "ƒêƒÉng k√Ω th√†nh c√¥ng!"})
        except sqlite3.IntegrityError:
            return jsonify({"status": "error", "message": "T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!"})
    return render_template("register.html")

# ƒêƒÉng nh·∫≠p
@app.route("/login", methods=["GET", "POST"])

def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        conn = sqlite3.connect("chat.db")
        cursor = conn.cursor()
        cursor.execute("SELECT password FROM users WHERE username=?", (username,))
        user = cursor.fetchone()
        conn.close()
        if user and bcrypt.check_password_hash(user[0], password):
            session["username"] = username
            return redirect("/")
        else:
            return "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!"
    return render_template("login.html")

# ƒêƒÉng xu·∫•t
@app.route("/logout")
def logout():
    username = session.get("username")
    if username in users_online:
        users_online.remove(username)
        emit("update_users", list(users_online), broadcast=True)
    session.pop("username", None)
    return redirect("/login")

#t·∫£i file l√™n
@app.route("/upload", methods=["POST"])
def upload_file():
    if "file" not in request.files:
        return jsonify({"status": "error", "message": "Kh√¥ng c√≥ file!"})

    file = request.files["file"]
    if file.filename == "":
        return jsonify({"status": "error", "message": "Ch∆∞a ch·ªçn file!"})

    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config["UPLOAD_FOLDER"], filename)
        file.save(filepath)

        file_url = f"/static/uploads/{filename}"
        username = session.get("username", "·∫®n danh")

        # X√°c ƒë·ªãnh lo·∫°i file ƒë·ªÉ hi·ªÉn th·ªã ph√π h·ª£p
        if filename.lower().endswith(("png", "jpg", "jpeg", "gif")):
            message_content = f"{username} ƒë√£ g·ª≠i ·∫£nh: <br><a href='{file_url}' target='_blank'><img src='{file_url}' width='200px' onclick='openImage(this)'></a>"
        elif filename.lower().endswith(("mp4", "webm", "ogg")):
            message_content = f"{username} ƒë√£ g·ª≠i video: <br><video width='320' height='240' controls><source src='{file_url}' type='video/mp4'>Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ video.</video>"
        elif filename.lower().endswith(("mp3", "wav", "ogg")):
            message_content = f"{username} ƒë√£ g·ª≠i √¢m thanh: <br><audio controls><source src='{file_url}' type='audio/mpeg'>Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ √¢m thanh.</audio>"
        else:
            message_content = f"{username} ƒë√£ g·ª≠i file: <a href='{file_url}' target='_blank'>{filename}</a>"

        # L∆∞u v√†o database
        conn = sqlite3.connect("chat.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO messages (username, message) VALUES (?, ?)", (username, message_content))
        conn.commit()
        conn.close()

        # G·ª≠i tin nh·∫Øn ƒë·∫øn m·ªçi ng∆∞·ªùi
        socketio.emit("message", message_content)
        return jsonify({"status": "success", "message": "T·∫£i file th√†nh c√¥ng!", "url": file_url})

    return jsonify({"status": "error", "message": "ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá!"})

# L·ªãch s·ª≠ chat
@app.route("/history")
def chat_history():
    conn = sqlite3.connect("chat.db")
    cursor = conn.cursor()
    cursor.execute("SELECT username, message, timestamp FROM messages ORDER BY timestamp ASC")
    messages = cursor.fetchall()
    conn.close()
    return jsonify(messages)

# G·ª≠i tin nh·∫Øn real-time
@socketio.on("message")
def handle_message(msg):
    if "username" not in session:
        return  # Ch·∫∑n tin nh·∫Øn t·ª´ user ch∆∞a ƒëƒÉng nh·∫≠p
    
    username = session["username"]
    conn = sqlite3.connect("chat.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO messages (username, message) VALUES (?, ?)", (username, msg))
    conn.commit()
    conn.close()
    
    send(f"{username}: {msg}", broadcast=True)


# X·ª≠ l√Ω ng∆∞·ªùi d√πng online
@socketio.on("connect")
def handle_connect():
    username = session.get("username", "·∫®n danh")
    if username not in users_online:
        users_online.add(username)
    emit("update_users", list(users_online), broadcast=True)

@socketio.on("disconnect")
def handle_disconnect():
    username = session.get("username", "·∫®n danh")
    if username in users_online:
        users_online.remove(username)
    emit("update_users", list(users_online), broadcast=True)

# Kh·ªüi ƒë·ªông server v·ªõi ngrok
if __name__ == "__main__":
    from pyngrok import ngrok
    public_url = ngrok.connect(5000).public_url
    print(f"üî• Server ƒëang ch·∫°y t·∫°i: {public_url}")
    socketio.run(app, host="0.0.0.0", port=5000)
    
